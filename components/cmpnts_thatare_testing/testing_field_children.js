import Head from 'next/head'
import styles from '../forms/form.module.css'
import { Fragment, useRef } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup'
import httpUtils from '@lib/http-util'
import { useRouter } from 'next/router'
import SimpledivErrMsg from '@components/error/simpledivErrMsg'
import CustomInput from '@components/input/input'
function field_children() {
    const nmInpEl   = useRef(null);
    const phInpEl   = useRef(null);
    const emInpEl   = useRef(null);
    const addrInpEl = useRef(null);
    const rmrkInpEl = useRef(null);
    const amtInpEl  = useRef(null);
    const router    = useRouter()

    const schemaValidation = Yup.object({
            name: Yup.string().trim()
                .max(20, "Your name length must be max ${max} characters or less")
                .required("Required"),
            phone: Yup.number()
                .truncate()
                .positive("Your phone number must be positive")
                .integer("Your phone number must be integer")
                .required("Required"),
            email: Yup.string().trim()
                .email("Your email must be valid email addresss`")
                .required("Required"),
            address: Yup.string().trim()
                .min(10, "Your address length must be min ${min} characters or more"),
            remark: Yup.string().trim(),
            amount: Yup.number()
                .positive("Entered total amount must be positive")
                .integer("Entered total amount must be integer")
                .min(199, "Entered total amount must be more than ${min} in value")
                .required("Required"),
    })
        // const formObj = await schema.validate({ name: 'abcdefghijklmnopqrst', phone: parseInt("123456789"), email: 'abc@g.com', amount: parseInt("200")}).catch(function (err) {
        //     console.log(err);
        //     console.log(err.errors);
        // });
        // console.log(formObj)
                                                                                                                    
    return (
        <Fragment>
            <Head>
            <title>Payment form</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
            </Head>

            <Formik
                    initialValues={{
                        name: '',
                        phone: '',
                        email: '',
                        address: '',
                        remark: '',
                        amount: ''
                    }}
                    validationSchema={schemaValidation}
                    onSubmit={async (values) => {
                                console.dir("onSubmit callback values: "+values)
                                // const [ encryptstr_payload, hashText] = await httpUtils(nmInpEl.current.value, amtInpEl.current.value
                                //     , emInpEl.current.value, rmrkInpEl.current.value, phInpEl.current.value, addrInpEl.current.value);
                                // alert(`${encryptstr_payload} and ${hashText}`)
                                // console.log(`${encryptstr_payload} and ${hashText}`)    
                                // router.push(`https://form.dinger.asia?payload=${encryptstr_payload}&hashValue=${hashText}`)
                            }}
            >
            {(formik) => {
            const { errors, touched, isValid, dirty } = formik;
            return (
            <div className={`${styles.container}`}>
            {/* {console.dir("inside formik component: ")}
            {console.dir(formik)} */}
                <section className={styles.section}>
                    <div className={styles.logoContainer}>
                        <Link href='/'  alt="Logo">
                            <a> <Image  src="/images/site/dinger_logo.svg" width={400} height={300}/> </a>
                        </Link>
                    </div>
                </section>
                <section className={styles.section}>
                    <div className={styles.formContainer}>
                        <Form className={styles.form}>
                            <div className={styles["form-control"]} >
                                <div className={styles.labelColumn}>
                                    <span style={{color: "red !important", display: "inline", float: "none"}}>*</span>
                                    <label htmlFor="name">Customer Name</label>
                                </div>
                                <Field name="name" >
                                    { props => {
                                        const {field, form, meta} = props
                                        return (
                                            <div>
                                                <CustomInput id="name" type="text" placeholder="Customer Name" ref={nmInpEl} {...field} meta={meta}/>
                                                {meta.error && meta.touched ? <div className={styles.errors}>{errors.name}</div> : null}
                                            </div>
                                        )
                                    }}
                                </Field>
                            </div>
                            <div className={styles["form-control"]} >
                                <div className={styles.labelColumn}>
                                    <span style={{color: "red !important", display: "inline", float: "none"}}>*</span>
                                    <label htmlFor="phone">Customer Phone</label>
                                </div>
                                <Field name="name" >
                                    { props => {
                                        const {field, form, meta} = props
                                        return (
                                            <div>
                                                <CustomInput id="name" type="text" placeholder="Customer Name" ref={nmInpEl} {...field} meta={meta}/>
                                                {meta.error && meta.touched ? <div className={styles.errors}>{errors.name}</div> : null}
                                            </div>
                                        )
                                    }}
                                </Field>
                            </div>
                            <div className={styles["form-control"]} >
                                <div className={styles.labelColumn}>
                                    <span style={{color: "red !important", display: "inline", float: "none"}}>*</span>
                                    <label htmlFor="email">Email</label>
                                </div>
                                <Field className={`${styles.inputColumn} ${errors.email && touched.email? styles.inptouched: null}`}
                                    id ="email"
                                    name="email"
                                    type="email"
                                    placeholder="Email"
                                    ref={emInpEl}
                                />
                                <ErrorMessage name='email'>
                                    {errMsg => <div className={styles.errors}>{errMsg}</div>}
                                </ErrorMessage>
                            </div>
                            <div className={styles["form-control"]} >
                                <div className={styles.labelColumn}>
                                    <label htmlFor="address">Customer Address</label>
                                </div>
                                <Field className={`${styles.inputColumn} ${errors.address && touched.address? styles.inptouched: null}`}
                                    id="address"
                                    name="address"
                                    type="text"
                                    placeholder="Customer Address"
                                    ref={addrInpEl}
                                    maxLength={10}
                                />
                                <ErrorMessage name='address' component={SimpledivErrMsg} />
                            </div>
                            <div className={styles["form-control"]} >
                                <div className={styles.labelColumn}>
                                    <label htmlFor="remark">Description</label>
                                </div>
                                <Field className={`${styles.inputColumn} ${errors.remark && touched.remark? styles.inptouched: null}`}
                                    id="remark"
                                    name="remark"
                                    type="text"
                                    placeholder="Description"
                                    ref={rmrkInpEl}
                                />
                                <ErrorMessage name='remark' className={styles.errors} />
                            </div>
                            <div className={styles["form-control"]} >
                                <div className={styles.labelColumn}>
                                    <span style={{color: "red !important", display: "inline", float: "none"}}>*</span>
                                    <label htmlFor="amount">Total Amount</label>
                                </div>
                                <Field className={`${styles.inputColumn} ${errors.amount && touched.amount? styles.inptouched: null}`}
                                    id="amount"
                                    name="amount"
                                    type="number"
                                    placeholder="Total Amount"
                                    ref={amtInpEl}
                                />
                                <ErrorMessage name='amount' component={SimpledivErrMsg} />
                            </div>
                            <div className={`${styles.buttonContainer} ${styles["form-control"]}`} >
                                <button type="submit" className={`${styles.button}`}
                                    disabled={!(dirty && isValid)} >Submit</button>
                            </div>
                        </Form>
                    </div>
                </section>
            </div>)}}
            </Formik>
        </Fragment>
    )
}

export default field_children